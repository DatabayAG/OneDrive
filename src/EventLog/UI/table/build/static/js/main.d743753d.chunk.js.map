{"version":3,"sources":["Columns.tsx","DataTable.tsx","App.tsx","reportWebVitals.ts","i18n/i18n.tsx","index.tsx"],"names":["columns","translate","field","title","defaultSort","DataTable","props","data","window","exod_log_data","state","map","set","event_type_translated","t","event_type","object_type_translated","object_type","additional_data_translated","formatAdditionalData","additional_data","this","options","filtering","parsed","JSON","parse","string","Object","keys","key","React","Component","withTranslation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","resources","require","i18n","use","initReactI18next","init","lng","fallbackLng","debug","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+gDA6BeA,EA7BC,SAACC,GACb,MAAO,CACH,CACIC,MAAO,YACPC,MAAOF,EAAU,oBACjBG,YAAa,QAEjB,CACIF,MAAO,UACPC,MAAOF,EAAU,gBAErB,CACIC,MAAO,wBACPC,MAAOF,EAAU,sBAErB,CACIC,MAAO,OACPC,MAAOF,EAAU,gBAErB,CACIC,MAAO,yBACPC,MAAOF,EAAU,uBAErB,CACIC,MAAO,6BACPC,MAAOF,EAAU,6B,iBCpBvBI,E,kDAEF,WAAYC,GAAa,IAAD,sBACpB,cAAMA,GAEN,IAAIC,EAAYC,OAAOC,cAHH,OAIpB,EAAKC,MAAQ,CACTH,KAAMA,EAAKI,KAAI,SAACC,GAIZ,OAHAA,EAAIC,sBAAwB,EAAKP,MAAMQ,EAAE,cAAgBF,EAAIG,YAC7DH,EAAII,uBAAyB,EAAKV,MAAMQ,EAAE,eAAiBF,EAAIK,aAC/DL,EAAIM,2BAA6B,EAAKC,qBAAqBP,EAAIQ,iBACxDR,MATK,E,0CAcxB,WACI,OAAQ,cAAC,IAAD,CACJT,MAAM,SACNI,KAAMc,KAAKX,MAAMH,KACjBP,QAASA,EAAQqB,KAAKf,MAAMQ,GAC5BQ,QAAS,CAACC,WAAW,O,kCAI7B,SAAqBH,GAA0B,IAAD,OACtCI,EAASC,KAAKC,MAAMN,GACpBO,EAAS,GAIb,OAHAC,OAAOC,KAAKL,GAAQb,KAAI,SAACmB,GACrBH,GAAU,EAAKrB,MAAMQ,EAAE,mBAAqBgB,GAAO,KAAON,EAAOM,MAE9DH,M,GA/BSI,IAAMC,WAmCfC,gBAAkB5B,GC9BlB6B,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kBCNRQ,EAAYC,EAAQ,KAE1BC,IAAKC,IAAIC,KACJC,KAAK,CACFL,YAEAM,IAAK1C,OAAO0C,IACZC,YAAa,KACbC,OAAO,IAGAN,EAAf,ECPAO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.d743753d.chunk.js","sourcesContent":["const columns = (translate: ((a: string) => string)) : any => {\n    return [\n        {\n            field: \"timestamp\",\n            title: translate('column.timestamp'),\n            defaultSort: \"desc\"\n        },\n        {\n            field: \"user_id\",\n            title: translate('column.user')\n        },\n        {\n            field: \"event_type_translated\",\n            title: translate('column.event_type'),\n        },\n        {\n            field: \"path\",\n            title: translate('column.path')\n        },\n        {\n            field: \"object_type_translated\",\n            title: translate('column.object_type')\n        },\n        {\n            field: \"additional_data_translated\",\n            title: translate('column.additional_data')\n        }\n    ];\n};\nexport default columns;\n","import React from \"react\";\nimport MaterialTable from 'material-table';\nimport columns from \"./Columns\";\nimport { withTranslation } from \"react-i18next\";\n\nclass DataTable extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        // @ts-ignore\n        let data: any = window.exod_log_data;\n        this.state = {\n            data: data.map((set: any) => {\n                set.event_type_translated = this.props.t(\"event_type.\" + set.event_type);\n                set.object_type_translated = this.props.t(\"object_type.\" + set.object_type);\n                set.additional_data_translated = this.formatAdditionalData(set.additional_data);\n                return set;\n            })\n        }\n    }\n\n    render() {\n        return (<MaterialTable\n            title=\"Events\"\n            data={this.state.data}\n            columns={columns(this.props.t)}\n            options={{filtering: true}}\n        />);\n    }\n\n    formatAdditionalData(additional_data: string) {\n        let parsed = JSON.parse(additional_data);\n        let string = '';\n        Object.keys(parsed).map((key: string) => {\n            string += this.props.t(\"additional_data.\" + key) + \": \" + parsed[key]\n        });\n        return string;\n    }\n}\n\nexport default withTranslation()(DataTable);\n","import React from 'react';\nimport './App.css';\nimport DataTable from \"./DataTable\";\n\nfunction App() {\n  return (\n    <DataTable/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from \"i18next\";\nimport {initReactI18next} from \"react-i18next\";\n\nconst resources = require('./i18n.json')\n\ni18n.use(initReactI18next)\n    .init({\n        resources,\n        // @ts-ignore\n        lng: window.lng,\n        fallbackLng: \"en\",\n        debug: true,\n    });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n/i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}